#!/bin/sh
# -*- mode: shell-script -*-
#
# from SE
# git fetch / git merge...

# <dir>/support/hmslincs/bsub -q short -W 1:0 ./re_run.sh dev

# <dir>/support/hmslincs/find_and_move_restricted_images.sh   (currently this command must be run from this directory.  small modification and the root directory could be an argument)

# then, finally, curl...

# from JM
# dev:
# curl -f http://dev.lincs.hms.harvard.edu/cgi-bin/cleanup.cgi

# live:
# curl -f http://lincs.hms.harvard.edu/cgi-bin/cleanup.cgi

# (the -f means "treat http 404 errors as fatal and exit with a non-zero status")


BASEDIR="$(dirname $0)"
LOGFILE="$0.log"

PRODSITE=prod
DEVSITE=dev

#PRODBRANCH=master
#DEVBRANCH=dev
PRODBRANCH=test-ignore
DEVBRANCH=test-ignore

URLTEMPLATE='http://%slincs.hms.harvard.edu/cgi-bin/cleanup.cgi'
ORIGIN=${ORIGIN:-origin}
GIT=${GIT:-git}

function main {
  if [ -n "$DEBUG" ]; then set -x; fi

  cd "$BASEDIR"

  SITE="$1"
  BRANCH="$2"

  if [ -z "$SITE" ]; then
    case "$BASEDIR" in
      /www/lincs.*) SITE="$PRODSITE" ;;
      *) SITE="$DEVSITE" ;;
    esac
  fi

  if [ -z "$BRANCH" ]; then
    if [ "$SITE" = "$PRODSITE" ]; then
      BRANCH="$PRODBRANCH"
    else
      BRANCH="$DEVBRANCH"
    fi
  fi

  local urlprefix
  if [ "$SITE" = "$PRODSITE" ]; then
    urlprefix=""
  else
    urlprefix="dev."
  fi

  URL=$(printf "$URLTEMPLATE" "$urlprefix")

  echo
  echo 'PARAMS:'
  echo "site: $SITE"
  echo "origin: $ORIGIN"
  echo "branch: $BRANCH"
  echo "url: $URL"
  echo

  #bsub -q short deploy
  deploy
  local shellstatus=$?
  [ "$shellstatus" = 0 ] || echo "$0: failed ($shellstatus)" >&2

  return $shellstatus
}

function deploy {
  date +'%n%c' >>"$LOGFILE"
  gitpull && builddb && moveimg && bounce
}

function gitpull {

  $GIT checkout $BRANCH >>"$LOGFILE" 2>&1
  local lastline
  lastline=$($GIT pull $ORIGIN $BRANCH: 2>&1 | tee -a "$LOGFILE" | tail -1)

  [ "$lastline" = 'Already up-to-date.' ] && return 1

  echo "stayed: $lastline"
  return 0
}

function builddb {
  echo $BASEDIR/re_run.sh $SITE
  return 0
}

function moveimg {
  echo $BASEDIR/find_and_move_restricted_images.sh
  return 0
}

function bounce {
  echo curl -f "$URL"
}

# if [ "$1" = '-d' ]; then
#   DEBUG=1
#   shift
# fi

main $1 $2

# function fails {
#   echo failing
#   return 1
# }

# function ff {
#   local out=$(fails ; SHSTAT=$?; echo "finishing...")
#   echo "$out ($SHSTAT)"
#   return $SHSTAT
# }

# ff

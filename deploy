#!/bin/sh
# -*- mode: shell-script -*-

PROG=$(basename $0)
BASEDIR=${BASEDIR:-"$(dirname $(realpath $0))"}
SUPPORTDIR=${SUPPORTDIR:-"$(dirname $(dirname $BASEDIR))/support"}
VIRTUAL_ENV=${VIRTUAL_ENV:-"$SUPPORTDIR/virtualenv"}
source "$VIRTUAL_ENV/bin/activate"

LOGFILE=${LOGFILE:-"$0.log"}
PRODSITE=prod
DEVSITE=dev

PRODBRANCH=master
DEVBRANCH=dev
# PRODBRANCH=test-ignore
# DEVBRANCH=test-ignore

URLTEMPLATE='http://%slincs.hms.harvard.edu/cgi-bin/cleanup.cgi'

ORIGIN=${ORIGIN:-git@github.com:hmslincs/hmslincs.git}
FULL=false
STATICS=true

function error {
  echo "$PROG: $1" >&2
  exit 1
}

function _debug {
  if $DEBUG; then
    echo "$@"
  fi
}

function __usage {
    echo "$PROG [-m|-f] [-d] [SITE [BRANCH]]
$PROG -h

  -h -- print this help message and exit
  -m -- minimal update
  -f -- do full update (rebuild db, remake and move images, etc.)
  -d -- debug mode

SITE should be either $PRODSITE or $DEVSITE.  BRANCH should be a suitable
branch from $ORIGIN.

Default actions: git-pull, make and move files, kill fast cgi."
    exit $1
}

function main {
  OPTIND=1
  while getopts ":hmfd" opt "$@"
  do
    case "$opt" in
      h) __usage 0;;
      m) FULL=false
         STATICS=false;;
      f) FULL=true
         STATICS=true;;
      d) DEBUG=true
         LOGFILE=$(tty);;
      ?) echo "$0: illegal option -- $OPTARG" >&2
         __usage 1;;
    esac
  done

  shift $(( OPTIND - 1 ))

  cd "$BASEDIR" || error "can't cd to $BASEDIR"

  SITE="$1"
  BRANCH="$2"

  if [[ -z $SITE ]]; then
    case "$BASEDIR" in
      /www/lincs.*) SITE="$PRODSITE" ;;
                 *) SITE="$DEVSITE" ;;
    esac
  fi

  if [[ -z $BRANCH ]]; then
    if [[ $SITE = $PRODSITE ]]; then
      BRANCH="$PRODBRANCH"
    else
      BRANCH="$DEVBRANCH"
    fi
  fi

  if [[ $SITE = $PRODSITE ]]; then
    URL=$(printf "$URLTEMPLATE" "")
  elif [[ $SITE = $DEVSITE ]]; then
    URL=$(printf "$URLTEMPLATE" dev.)
  else
    URL=
    echo "$SITE is not a supported site: will not run cleanup.cgi"
  fi

  if $DEBUG; then
    echo "params:
SITE: $SITE
ORIGIN: $ORIGIN
BRANCH: $BRANCH
URL: $URL
"
  fi

  deploy || error "failed with status $?"

  return 0
}

function gitpull {
  _debug -n "pulling branch $BRANCH from $ORIGIN... "
  git checkout $BRANCH >>"$LOGFILE" 2>&1 || error "git-checkout failed: $?"
  git pull --ff-only $ORIGIN $BRANCH: >>"$LOGFILE" 2>&1 || error "git-pull failed: $?"
  _debug 'done'
  return 0
}

function builddb {
  if $FULL; then
    _debug -n 'building db... '
    $BASEDIR/re_run.sh $SITE >>"$LOGFILE" 2>&1 || error "re_run.sh failed: $?"
    _debug 'done'
  fi
}

function makeimg {
  if $STATICS; then
    _debug -n 'making images... '
    cd "$BASEDIR" || return 1
    src/do_scatterplots.sh >>"$LOGFILE" 2>&1 || \
        error "src/do_scatterplots.sh failed: $?"
    PYTHONPATH="$BASEDIR"/django DJANGO_SETTINGS_MODULE=hmslincs_server.settings \
	python src/do_pathway.py >>"$LOGFILE" 2>&1 || \
        error "src/do_pathway.py failed: $?"
    _debug 'done'
  fi
}

function moveimg {
  if $STATICS; then
    _debug -n 'moving images... '
    cd "$BASEDIR" || return 1
    DEBUG=$DEBUG ./find_and_move_restricted_images.sh >>"$LOGFILE" 2>&1 || \
        error "find_and_move_restricted_images.sh failed: $?"
    _debug 'done'
  fi
}

function collectstatic {
  if $STATICS; then
    _debug -n 'collecting statics... '
    cd "$BASEDIR" || return 1
    mkdir -p $SUPPORTDIR/images || return 1
    python django/manage.py collectstatic --noinput >>"$LOGFILE" 2>&1 || \
        error "manage.py collectstatic failed: $?"
    _debug 'done'
  fi
}

function killfcgi {
  [[ -z $URL ]] && return 0
  _debug -n 'running cleanup.cgi... '
  curl -sf "$URL" >> "$LOGFILE" || error '"'"curl -f $URL"'" failed'
  _debug 'done'
}

function deploy {
  echo >>"$LOGFILE"
  echo "===========================================================================" >>"$LOGFILE"
  echo $(date --iso-8601=seconds) \($(date +%A)\) >>"$LOGFILE"
  echo "deployed by $USER ($UID) connected from ${SSH_CLIENT/ *}" >>"$LOGFILE"
  echo >>"$LOGFILE"
  gitpull && builddb && makeimg && moveimg && collectstatic && killfcgi
  echo done
}

main $@
